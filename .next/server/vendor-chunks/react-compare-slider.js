"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-compare-slider";
exports.ids = ["vendor-chunks/react-compare-slider"];
exports.modules = {

/***/ "(ssr)/./node_modules/react-compare-slider/dist/index.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/react-compare-slider/dist/index.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ReactCompareSlider: () => (/* binding */ se),\n/* harmony export */   ReactCompareSliderHandle: () => (/* binding */ F),\n/* harmony export */   ReactCompareSliderImage: () => (/* binding */ ae),\n/* harmony export */   styleFitContainer: () => (/* binding */ G),\n/* harmony export */   useReactCompareSliderRef: () => (/* binding */ _e)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* __next_internal_client_entry_do_not_use__ ReactCompareSlider,ReactCompareSliderHandle,ReactCompareSliderImage,styleFitContainer,useReactCompareSliderRef auto */ \n\n\nvar B = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ transition: e, ...t }, r)=>{\n    let o = {\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        transition: e ? `clip-path ${e}` : void 0,\n        userSelect: \"none\",\n        willChange: \"clip-path, transition\",\n        KhtmlUserSelect: \"none\",\n        MozUserSelect: \"none\",\n        WebkitUserSelect: \"none\"\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        ...t,\n        style: o,\n        \"data-rcs\": \"clip-item\",\n        ref: r\n    });\n});\nB.displayName = \"ContainerClip\";\nvar W = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ children: e, disabled: t, portrait: r, position: o, transition: i }, m)=>{\n    let u = {\n        position: \"absolute\",\n        top: 0,\n        width: r ? \"100%\" : void 0,\n        height: r ? void 0 : \"100%\",\n        background: \"none\",\n        border: 0,\n        padding: 0,\n        pointerEvents: \"all\",\n        appearance: \"none\",\n        WebkitAppearance: \"none\",\n        MozAppearance: \"none\",\n        outline: 0,\n        transform: r ? \"translate3d(0, -50% ,0)\" : \"translate3d(-50%, 0, 0)\",\n        transition: i ? `${r ? \"top\" : \"left\"} ${i}` : void 0\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"button\", {\n        ref: m,\n        \"aria-label\": \"Drag to move or focus and use arrow keys\",\n        \"aria-orientation\": r ? \"vertical\" : \"horizontal\",\n        \"aria-valuemin\": 0,\n        \"aria-valuemax\": 100,\n        \"aria-valuenow\": o,\n        \"data-rcs\": \"handle-container\",\n        disabled: t,\n        role: \"slider\",\n        style: u,\n        children: e\n    });\n});\nW.displayName = \"ThisHandleContainer\";\n\nvar re = ({ flip: e })=>(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n        className: \"__rcs-handle-arrow\",\n        style: {\n            width: 0,\n            height: 0,\n            borderTop: \"8px solid transparent\",\n            borderRight: \"10px solid\",\n            borderBottom: \"8px solid transparent\",\n            transform: e ? \"rotate(180deg)\" : void 0\n        }\n    }), F = ({ className: e = \"__rcs-handle-root\", disabled: t, buttonStyle: r, linesStyle: o, portrait: i, style: m, ...C })=>{\n    let u = {\n        display: \"flex\",\n        flexDirection: i ? \"row\" : \"column\",\n        placeItems: \"center\",\n        height: \"100%\",\n        cursor: t ? \"not-allowed\" : i ? \"ns-resize\" : \"ew-resize\",\n        pointerEvents: \"none\",\n        color: \"#fff\",\n        ...m\n    }, E = {\n        flexGrow: 1,\n        height: i ? 2 : \"100%\",\n        width: i ? \"100%\" : 2,\n        backgroundColor: \"currentColor\",\n        pointerEvents: \"auto\",\n        boxShadow: \"0 0 4px rgba(0,0,0,.5)\",\n        ...o\n    }, y = {\n        display: \"grid\",\n        gridAutoFlow: \"column\",\n        gap: 8,\n        placeContent: \"center\",\n        flexShrink: 0,\n        width: 56,\n        height: 56,\n        borderRadius: \"50%\",\n        borderStyle: \"solid\",\n        borderWidth: 2,\n        pointerEvents: \"auto\",\n        backdropFilter: \"blur(7px)\",\n        WebkitBackdropFilter: \"blur(7px)\",\n        backgroundColor: \"rgba(0, 0, 0, 0.125)\",\n        boxShadow: \"0 0 4px rgba(0,0,0,.35)\",\n        transform: i ? \"rotate(90deg)\" : void 0,\n        ...r\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        ...C,\n        className: e,\n        style: u,\n        children: [\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: \"__rcs-handle-line\",\n                style: E\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n                className: \"__rcs-handle-button\",\n                style: y,\n                children: [\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(re, {}),\n                    (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(re, {\n                        flip: !0\n                    })\n                ]\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"div\", {\n                className: \"__rcs-handle-line\",\n                style: E\n            })\n        ]\n    });\n};\n\nvar $ = ((i)=>(i.ARROW_LEFT = \"ArrowLeft\", i.ARROW_RIGHT = \"ArrowRight\", i.ARROW_UP = \"ArrowUp\", i.ARROW_DOWN = \"ArrowDown\", i))($ || {}), G = ({ boxSizing: e = \"border-box\", objectFit: t = \"cover\", objectPosition: r = \"center center\", ...o } = {})=>({\n        display: \"block\",\n        width: \"100%\",\n        height: \"100%\",\n        maxWidth: \"100%\",\n        boxSizing: e,\n        objectFit: t,\n        objectPosition: r,\n        ...o\n    }), oe = (e)=>{\n    let t = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(e);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        t.current = e;\n    }), t.current;\n}, U = (e, t, r, o)=>{\n    let i = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        i.current = t;\n    }, [\n        t\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (!(r && r.addEventListener)) return;\n        let m = (C)=>i.current && i.current(C);\n        return r.addEventListener(e, m, o), ()=>{\n            r.removeEventListener(e, m, o);\n        };\n    }, [\n        e,\n        r,\n        o\n    ]);\n}, Te =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect, ie = (e, t)=>{\n    let r = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(), o = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        e.current && r.current && r.current.observe(e.current);\n    }, [\n        e\n    ]);\n    Te(()=>(r.current = new ResizeObserver(([i])=>t(i.contentRect)), o(), ()=>{\n            r.current && r.current.disconnect();\n        }), [\n        t,\n        o\n    ]);\n};\n\nvar I = {\n    capture: !1,\n    passive: !0\n}, X = {\n    capture: !0,\n    passive: !1\n}, Me = (e)=>{\n    e.preventDefault(), e.currentTarget.focus();\n}, se = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ boundsPadding: e = 0, browsingContext: t = globalThis, changePositionOnHover: r = !1, disabled: o = !1, handle: i, itemOne: m, itemTwo: C, keyboardIncrement: u = \"5%\", onlyHandleDraggable: E = !1, onPositionChange: y, portrait: a = !1, position: g = 50, style: le, transition: ce, ...pe }, de)=>{\n    let p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), j = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), f = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null), d = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(g), [L, q] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1), [me, x] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!0), w = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(!1), [ue, fe] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(), J = oe(g), l = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function({ x: s, y: c, isOffset: R }) {\n        let b = p.current, A = f.current, D = j.current, { width: h, height: S, left: Pe, top: Ee } = b.getBoundingClientRect();\n        if (h === 0 || S === 0) return;\n        let ye = a ? R ? c - Ee - t.scrollY : c : R ? s - Pe - t.scrollX : s, Q = Math.min(Math.max(ye / (a ? S : h) * 100, 0), 100), z = a ? S / (b.offsetHeight || 1) : h / (b.offsetWidth || 1), Z = e * z / (a ? S : h) * 100, _ = Math.min(Math.max(Q, Z * z), 100 - Z * z);\n        d.current = Q, A.setAttribute(\"aria-valuenow\", `${Math.round(d.current)}`), A.style.top = a ? `${_}%` : \"0\", A.style.left = a ? \"0\" : `${_}%`, D.style.clipPath = a ? `inset(${_}% 0 0 0)` : `inset(0 0 0 ${_}%)`, y && y(d.current);\n    }, [\n        e,\n        y,\n        a,\n        t\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let { width: n, height: s } = p.current.getBoundingClientRect(), c = g === J ? d.current : g;\n        l({\n            x: n / 100 * c,\n            y: s / 100 * c\n        });\n    }, [\n        e,\n        g,\n        a,\n        J,\n        l\n    ]);\n    let Re = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((n)=>{\n        n.preventDefault(), !(o || n.button !== 0) && (l({\n            isOffset: !0,\n            x: n.pageX,\n            y: n.pageY\n        }), q(!0), x(!0));\n    }, [\n        o,\n        l\n    ]), v = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(function(s) {\n        l({\n            isOffset: !0,\n            x: s.pageX,\n            y: s.pageY\n        }), x(!1);\n    }, [\n        l\n    ]), T = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(()=>{\n        q(!1), x(!0);\n    }, []), Se = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)(({ width: n, height: s })=>{\n        let { width: c, height: R } = p.current.getBoundingClientRect();\n        l({\n            x: n / 100 * d.current * c / n,\n            y: s / 100 * d.current * R / s\n        });\n    }, [\n        l\n    ]), Ce = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((n)=>{\n        if (!Object.values($).includes(n.key)) return;\n        n.preventDefault(), x(!0);\n        let { top: s, left: c } = f.current.getBoundingClientRect(), { width: R, height: b } = p.current.getBoundingClientRect(), D = typeof u == \"string\" ? parseFloat(u) : u / R * 100, h = a ? n.key === \"ArrowLeft\" || n.key === \"ArrowDown\" : n.key === \"ArrowRight\" || n.key === \"ArrowUp\", S = Math.min(Math.max(h ? d.current + D : d.current - D, 0), 100);\n        l({\n            x: a ? c : R * S / 100,\n            y: a ? b * S / 100 : s\n        });\n    }, [\n        u,\n        a,\n        l\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        fe(E ? f.current : p.current);\n    }, [\n        E\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        let n = p.current, s = ()=>{\n            L || T();\n        };\n        return r && (n.addEventListener(\"pointermove\", v, I), n.addEventListener(\"pointerleave\", s, I)), ()=>{\n            n.removeEventListener(\"pointermove\", v), n.removeEventListener(\"pointerleave\", s);\n        };\n    }, [\n        r,\n        v,\n        T,\n        L\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>(L && !w.current && (t.addEventListener(\"pointermove\", v, I), t.addEventListener(\"pointerup\", T, I), w.current = !0), ()=>{\n            w.current && (t.removeEventListener(\"pointermove\", v), t.removeEventListener(\"pointerup\", T), w.current = !1);\n        }), [\n        v,\n        T,\n        L,\n        t\n    ]), (0,react__WEBPACK_IMPORTED_MODULE_0__.useImperativeHandle)(de, ()=>({\n            rootContainer: p.current,\n            handleContainer: f.current,\n            setPosition (n) {\n                let { width: s, height: c } = p.current.getBoundingClientRect();\n                l({\n                    x: s / 100 * n,\n                    y: c / 100 * n\n                });\n            }\n        }), [\n        l\n    ]), ie(p, Se), U(\"keydown\", Ce, f.current, X), U(\"click\", Me, f.current, X), U(\"pointerdown\", Re, ue, X);\n    let ve = i || (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(F, {\n        disabled: o,\n        portrait: a\n    }), K = me ? ce : void 0, he = {\n        position: \"relative\",\n        display: \"flex\",\n        overflow: \"hidden\",\n        cursor: L ? a ? \"ns-resize\" : \"ew-resize\" : void 0,\n        touchAction: \"none\",\n        userSelect: \"none\",\n        KhtmlUserSelect: \"none\",\n        msUserSelect: \"none\",\n        MozUserSelect: \"none\",\n        WebkitUserSelect: \"none\",\n        ...le\n    };\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(\"div\", {\n        ...pe,\n        ref: p,\n        style: he,\n        \"data-rcs\": \"root\",\n        children: [\n            m,\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(B, {\n                ref: j,\n                transition: K,\n                children: C\n            }),\n            (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(W, {\n                disabled: o,\n                portrait: a,\n                position: Math.round(d.current),\n                ref: f,\n                transition: K,\n                children: ve\n            })\n        ]\n    });\n});\nse.displayName = \"ReactCompareSlider\";\n\n\nvar ae = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(({ style: e, ...t }, r)=>{\n    let o = G(e);\n    return (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"img\", {\n        ref: r,\n        ...t,\n        style: o,\n        \"data-rcs\": \"image\"\n    });\n});\nae.displayName = \"ReactCompareSliderImage\";\n\nvar _e = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)({\n        rootContainer: null,\n        handleContainer: null,\n        setPosition: ()=>console.warn(\"[react-compare-slider] `setPosition` cannot be used until the component has mounted.\")\n    });\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/react-compare-slider/dist/index.mjs\n");

/***/ })

};
;